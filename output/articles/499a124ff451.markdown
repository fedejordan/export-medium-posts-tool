* * *

# SimpleRTApp: Twitter Search API con Node.js

Esta es la segunda parte de una serie de artículos que escribí con el objetivo de tener un sistema que me notifique tweets de mi interés, y mediante una app pueda retuitearlos a mi gusto. Para ver la lista completa hacer click [acá](https://medium.com/@federicojordn/c%C3%B3mo-obtener-twitts-relevantes-en-una-app-de-ios-con-heroku-nodejs-swift-4c4aca1f42b2).

En esta ocasión vamos a ver como obtener tweets mediante la API de Twitter en Node.js. Para ello, vamos a ver como realizar la autenticación para una app y ver como trabaja la Search API de Twitter para obtener esta información

#### Requisitos

Es necesario tener configurada una app en Twitter. En la [primer parte de este artículo](https://medium.com/@federicojordn/simplertapp-authentication-y-retweet-con-twitter-api-en-ios-4829d489de74) lo explico con detalles. Ademas de tener configurado `npm` localmente.

### Application-only Authentication

Twitter ofrece la posibilidad de autenticar las consultas a su API con la autenticación de app. Esto significa que sólo podremos realizar cosas que no requieren la autorización de un usuario. Algunas funcionalidades que tendremos disponibles son las siguientes:

*   Traer tweets de usuarios públicos
*   Acceder a los amigos y seguidores de cualquier cuenta
*   Buscar en tweets
*   Obtener cualquier informacion de algún usuario

En cambio, algunas cosas que no podremos hacer son las siguientes:

*   Postear tweets o algun otro recurso
*   Conectarse a puntos de streaming
*   Buscar por usuarios
*   Usar cualquier punto de geolocalización
*   Acceder a los mensajes directos o credenciales de usuarios

#### Pasos de Auth Flow

El flujo de Application-only authentication comprende los siguientes pasos:

*   Una aplicación encodea su **Consumer Key** y su **Consumer Secret** en un conjunto especial de credenciales
*   La aplicación hace un request al endpoint `POST Oauth2/token` para cambiar credenciales por un token de tipo **Bearer**
*   Cuando se quiera acceder a la API REST, la aplicación usa el **Bearer token** para autenticar.

Más información de estos conceptos lo pueden encontrar en [la documentación oficial de Twitter](https://developer.twitter.com/en/docs/basics/authentication/overview/application-only).

### Ejemplo de obtención de un Bearer token

Vamos a ver un ejemplo de generación de Bearer token y consulta de la API de Twitter con ese token. Para ello vamos a encodear la **Consumer Key** y la **Consumer Secret**, obtenemos el Bearer de Twitter, y comprobamos que hicimos todo bien haciendo un request de un timeline.

#### Paso 1: Encodear Consumer Key y Consumer Secret

1.  Hacer un URL Encode a la Consumer Key y la Consumer Secret con el estandar RFC 1738\. Supongamos que tenemos las siguientes claves:

<pre name="7aba" id="7aba" class="graf graf--pre graf-after--li">ConsumerKey: xvz1evFS4wEEPTGEFPHBog </pre>

<pre name="d6ba" id="d6ba" class="graf graf--pre graf-after--pre">ConsumerSecret L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg</pre>

Realizamos el URL encode en RFC 1738 (por ejemplo, en [esta página](https://www.urldecoder.org/)) y obtenemos:

<pre name="5bb3" id="5bb3" class="graf graf--pre graf-after--p">ConsumerKey: xvz1evFS4wEEPTGEFPHBog</pre>

<pre name="b02d" id="b02d" class="graf graf--pre graf-after--pre">ConsumerSecret L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg</pre>

Algo a notar es que en la actualidad estas claves van a mantener su valor despues de codificarlas. Pero es importante mantener este paso en caso de que su valor cambie en el futuro

2\. Concatenar los valores encodeados con el carácter de dos puntos (`:`) en una única cadena de texto. Nuestros valores quedarían de la siguiente forma:

<pre name="5e9f" id="5e9f" class="graf graf--pre graf-after--p">xvz1evFS4wEEPTGEFPHBog:L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg</pre>

3\. Encodear la string generada con el estandar **Base64**. Puede hacerse en una página como [esta](https://www.base64encode.org/). Esto nos daría como resultado:

<pre name="db4c" id="db4c" class="graf graf--pre graf-after--p">:: eHZ6MWV2RlM0d0VFUFRHRUZQSEJvZzpMOHFxOVBaeVJnNmllS0dFS2hab2xHQzB2SldMdzhpRUo4OERSZHlPZw==</pre>

Este valor se va a usar en las credenciales para el endpoint de generación del **Bearer token**.

#### Paso 2: Obtener un Bearer token

El valor obtenido anteriormente puede ser cambiado por un **Bearer token** haciendo un request a `POST Oauth2/token`. Para ello:

*   La request debe ser HTTP de tipo POST
*   Debe incluir un header `Authorization` con el valor de `Basic <valor obtenido en paso 2>`
*   Debe incluir un header `Content-Type` con el valor de `application/x-www-form-urlencoded;charset=UTF-8`
*   El body de la request debe ser `grant_type=client_credentials`

Nuestra request entonces sería de la siguiente forma:

<pre name="3282" id="3282" class="graf graf--pre graf-after--p">POST /oauth2/token HTTP/1.1
Host: api.twitter.com
User-Agent: My Twitter App v1.0.23
Authorization: Basic eHZ6MWV2RlM0d0VFUFRHRUZQSEJvZzpMOHFxOVBaeVJn
                     NmllS0dFS2hab2xHQzB2SldMdzhpRUo4OERSZHlPZw==
Content-Type: application/x-www-form-urlencoded;charset=UTF-8
Content-Length: 29
Accept-Encoding: gzip

grant_type=client_credentials</pre>

Comprobamos en [Postman](https://www.getpostman.com/) que nos de el Bearer:

![](https://cdn-images-1.medium.com/max/1600/1*LxEsarjDL_y7RWeZj5b1oA.png)Respuesta con el Bearer token

#### Paso 3: Autenticar una API request con el bearer token

El bearer token obtenido se puede utilizar para consultar API endpoints que soporten Application-only authentication. Para usar este token, al momento de contruir el request HTTP se deberá incluir un header `Authorization` con el valor `Bearer <valor generado en paso 2>`.

Request de ejemplo:

<pre name="ec9f" id="ec9f" class="graf graf--pre graf-after--p">GET /1.1/statuses/user_timeline.json?count=100&screen_name=twitterapi HTTP/1.1
Host: api.twitter.com
User-Agent: My Twitter App v1.0.23
Authorization: Bearer AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA%2FAAAAAAAAAAAA
                      AAAAAAAA%3DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Accept-Encoding: gzip</pre>

Estos pasos fueron extraídos de [la documentación oficial de Twitter](https://developer.twitter.com/en/docs/basics/authentication/overview/application-only).

### Twitter Search API en Node.js

Ya habiendo obtenido el Bearer token para poder realizar requests con nuestra app, podemos empezar a ver que nos ofrece la API de Twitter. En concreto, lo que queremos es tener una lista de los tweets más recientes en base a cierta búsqueda o hastags.

Es por eso que vamos a usar el package `twitter` para Node.js. La documentación oficial se encuentra [acá](https://www.npmjs.com/package/twitter).

En los siguientes pasos voy a asumir que tienen configurado Node.js apropiadamente. Si no lo tienen, pueden echar un vistazo [acá](https://nodejs.org/en/download/package-manager/).

Para hacer un simple script que nos muestre tweets en base a ciertos hashtags vamos a seguir estos pasos:

1.  Vamos a la terminal y hacemos `npm install twitter`. Esto nos va a crear la carpeta `node_modules` con la biblioteca de Twitter.
2.  Ingresamos tambíen `npm install dotenv` para poder usar un archivo de configuración de variables de entorno.
3.  Creamos un archivo `.env` y agregamos el siguiente contenido:

<pre name="0caf" id="0caf" class="graf graf--pre graf-after--li">TWITTER_CONSUMER_KEY=<ConsumerKey>
TWITTER_CONSUMER_SECRET=<ConsumerSecret>
TWITTER_BEARER_TOKEN=<BearerToken></pre>

Donde reemplazaremos `<ConsumerKey>`, `<ConsumerSecret>` y `<BearerToken>` por los valores para nuestra app de Twitter.

4\. Creamos un script de JavaScript `relevant_tweets.js` con el siguiente contenido:

<iframe width="700" height="250" src="/media/9e8d0e98f7f3aeeeab6586091bffbb1f?postId=499a124ff451" data-media-id="9e8d0e98f7f3aeeeab6586091bffbb1f" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars0.githubusercontent.com%2Fu%2F5657224%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="" frameborder="0"></iframe>

En este script hacemos lo siguiente:

*   Instanciamos un cliente de Twitter y le indicamos las variables configuradas en `.env`.
*   Hacemos un request de tipo `GET` a `search/tweets` con parámetros `q: "#ios #swift"`.
*   Mostramos el resultado en consola

5\. Corremos `node relevant_tweets.js` en la consola y vemos que nos muestra:

![](https://cdn-images-1.medium.com/max/1600/1*vl1_0Y5RgoQxvb5GCQgglg.png)Tweets con hashtags #ios #swift

Nos muestra los tweets más relevantes que contengan los hashtags `#ios` y `#swift`.

Pueden encontrar el proyecto finalizado en [https://github.com/fedejordan/SimpleRTAppAPI,](https://github.com/fedejordan/SimpleRTAppAPI) tag `relevant_tweets`.

### Conclusiones

Aprendimos como funciona la autenticación de app de Twitter. Generamos las credenciales necesarias para poder utilizarla, y vimos un ejemplo práctico en Node.js de como usar la Search API de Twitter, para obtener tweets con ciertos hashtags.

Más adelante voy a convertir este script en un cron que pueda recorrer los hashtags relevantes para el usuario, y puedan ser enviados como push notifications a sus dispositivos.

Cualquier consulta o sugerencia pueden hacerla comentando este post o enviando un mail a fedejordan99@gmail.com. Tambien pueden seguirme y mandar un mensaje privado a [mi twitter](https://twitter.com/FedeJordan90).

¡Muchas gracias por leer el artículo!